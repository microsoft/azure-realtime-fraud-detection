{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspaceName": {
            "type": "string",
            "metadata": {
                "description": "Specifies the name of the Azure Machine Learning workspace."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Specifies the location for all resources."
            }
        },
        "resourceGroupName": {
            "type": "string",
            "metadata": {
                "description": "Specifies the resource group name of the Azure Machine Learning workspace."
            }
        },
        "sku": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "Enterprise"
            ],
            "metadata": {
                "description": "Specifies the sku, also referred as 'edition' of the Azure Machine Learning workspace."
            }
        },
        "identityType": {
            "type": "string",
            "defaultValue": "systemAssigned",
            "allowedValues": [
                "systemAssigned",
                "userAssigned"
            ],
            "metadata": {
                "description": "Specifies the identity type of the Azure Machine Learning workspace."
            }
        },
        "primaryUserAssignedIdentityResourceGroup": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]",
            "metadata": {
                "description": "Specifies the resource group of user assigned identity that represents the Azure Machine Learing workspace."
            }
        },
        "primaryUserAssignedIdentityName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the name of user assigned identity that represents the Azure Machine Learing workspace."
            }
        },
        "storageAccountOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Determines whether or not a new storage should be provisioned."
            }
        },
        "storageAccountName": {
            "type": "string",
            "defaultValue": "[concat('sa', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of the storage account."
            }
        },
        "storageAccountType": {
            "type": "string",
            "defaultValue": "Standard_LRS",
            "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
            ]
        },
        "storageAccountBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ],
            "metadata": {
                "description": "Determines whether or not to put the storage account behind VNet"
            }
        },
        "storageAccountResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "storageAccountLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "storageAccountHnsEnabled": {
            "type": "bool",
            "defaultValue": false
        },
        "keyVaultOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Determines whether or not a new key vault should be provisioned."
            }
        },
        "keyVaultName": {
            "type": "string",
            "defaultValue": "[concat('kv', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of the key vault."
            }
        },
        "keyVaultBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ],
            "metadata": {
                "description": "Determines whether or not to put the storage account behind VNet"
            }
        },
        "keyVaultResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "keyVaultLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "applicationInsightsOption": {
            "type": "string",
            "defaultValue": "new",
            "allowedValues": [
                "new",
                "existing"
            ],
            "metadata": {
                "description": "Determines whether or not new ApplicationInsights should be provisioned."
            }
        },
        "applicationInsightsName": {
            "type": "string",
            "defaultValue": "[concat('ai', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of ApplicationInsights."
            }
        },
        "applicationInsightsResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "applicationInsightsLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "containerRegistryOption": {
            "type": "string",
            "defaultValue": "none",
            "allowedValues": [
                "new",
                "existing",
                "none"
            ],
            "metadata": {
                "description": "Determines whether or not a new container registry should be provisioned."
            }
        },
        "containerRegistryName": {
            "type": "string",
            "defaultValue": "[concat('cr', uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "The container registry bind to the workspace."
            }
        },
        "containerRegistrySku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ]
        },
        "containerRegistryResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "containerRegistryBehindVNet": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "true",
                "false"
            ],
            "metadata": {
                "description": "Determines whether or not to put container registry behind VNet."
            }
        },
        "containerRegistryLocation": {
            "type": "string",
            "defaultValue": "[parameters('location')]"
        },
        "vnetOption": {
            "type": "string",
            "defaultValue": "[if(equals(parameters('privateEndpointType'), 'none'), 'none', 'new')]",
            "allowedValues": [
                "new",
                "existing",
                "none"
            ],
            "metadata": {
                "description": "Determines whether or not a new VNet should be provisioned."
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "[concat('vn',uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of the VNet"
            }
        },
        "vnetResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]"
        },
        "addressPrefixes": {
            "type": "array",
            "defaultValue": [
                "10.0.0.0/16"
            ],
            "metadata": {
                "description": "Address prefix of the virtual network"
            }
        },
        "subnetOption": {
            "type": "string",
            "defaultValue": "[if(or(not(equals(parameters('privateEndpointType'), 'none')), equals(parameters('vnetOption'), 'new')), 'new', 'none')]",
            "allowedValues": [
                "new",
                "existing",
                "none"
            ],
            "metadata": {
                "description": "Determines whether or not a new subnet should be provisioned."
            }
        },
        "subnetName": {
            "type": "string",
            "defaultValue": "[concat('sn',uniqueString(parameters('resourceGroupName'), parameters('workspaceName')))]",
            "metadata": {
                "description": "Name of the subnet"
            }
        },
        "subnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "Subnet prefix of the virtual network"
            }
        },
        "adbWorkspace": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Azure Databrick workspace to be linked to the workspace"
            }
        },
        "confidential_data": {
            "type": "string",
            "defaultValue": "false",
            "allowedValues": [
                "false",
                "true"
            ],
            "metadata": {
                "description": "Specifies that the Azure Machine Learning workspace holds highly confidential data."
            }
        },
        "encryption_status": {
            "type": "string",
            "defaultValue": "Disabled",
            "allowedValues": [
                "Enabled",
                "Disabled"
            ],
            "metadata": {
                "description": "Specifies if the Azure Machine Learning workspace should be encrypted with customer managed key."
            }
        },
        "cmk_keyvault": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies the customer managed keyVault arm id."
            }
        },
        "resource_cmk_uri": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies if the customer managed keyvault key uri."
            }
        },
        "cmk_storageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies bring your own storage account id for customer managed keys"
            }
        },
        "cmk_searchAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies bring your own search service id for customer managed keys"
            }
        },
        "cmk_cosmosDbId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Specifies bring your own cosmos DB id for customer managed keys"
            }
        },
        "privateEndpointType": {
            "type": "string",
            "defaultValue": "none",
            "allowedValues": [
                "AutoApproval",
                "ManualApproval",
                "none"
            ]
        },
        "privateEndpointName": {
            "type": "string",
            "defaultValue": "pe",
            "metadata": {
                "description": "Name of the private end point added to the workspace"
            }
        },
        "privateEndpointResourceGroupName": {
            "type": "string",
            "defaultValue": "[parameters('resourceGroupName')]",
            "metadata": {
                "description": "Name of the resource group where the private end point is added to"
            }
        },
        "privateEndpointSubscription": {
            "type": "string",
            "defaultValue": "[subscription().subscriptionId]",
            "metadata": {
                "description": "Id of the subscription where the private end point is added to"
            }
        },
        "systemDatastoresAuthMode": {
            "type": "string",
            "defaultValue": "accessKey",
            "metadata": {
                "description": "Identity type of storage account services."
            }
        }
    },
    "variables": {
        "tenantId": "[subscription().tenantId]",
        "storageAccount": "[resourceId(parameters('storageAccountResourceGroupName'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
        "keyVault": "[resourceId(parameters('keyVaultResourceGroupName'), 'Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "containerRegistry": "[resourceId(parameters('containerRegistryResourceGroupName'), 'Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
        "applicationInsights": "[resourceId(parameters('applicationInsightsResourceGroupName'), 'Microsoft.Insights/components', parameters('applicationInsightsName'))]",
        "vnet": "[resourceId(parameters('privateEndpointSubscription'), parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
        "subnet": "[resourceId(parameters('privateEndpointSubscription'), parameters('vnetResourceGroupName'), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('subnetName'))]",
        "enablePE": true,
        "networkRuleSetBehindVNet": {
            "defaultAction": "deny",
            "virtualNetworkRules": [
                {
                    "action": "Allow",
                    "id": "[variables('subnet')]"
                }
            ]
        },
        "subnetPolicyForPE": {
            "privateEndpointNetworkPolicies": "Disabled",
            "privateLinkServiceNetworkPolicies": "Enabled"
        },
        "privateEndpointSettings": {
            "name": "[concat(parameters('workspaceName'), '-PrivateEndpoint')]",
            "properties": {
                "privateLinkServiceId": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('workspaceName'))]",
                "groupIds": [
                    "amlworkspace"
                ]
            }
        },
        "defaultPEConnections": "[array(variables('privateEndpointSettings'))]",
        "privateEndpointDeploymentName": "[concat('DeployPrivateEndpoint-', uniqueString(parameters('privateEndpointName')))]",
        "userAssignedIdentities": {
            "[variables('primaryUserAssignedIdentity')]": {}
        },
        "primaryUserAssignedIdentity": "[resourceId(parameters('primaryUserAssignedIdentityResourceGroup'), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('primaryUserAssignedIdentityName'))]",
        "appInsightsLogWorkspaceDeploymentName": "[concat('DeployLogWorkspace-', uniqueString(parameters('applicationInsightsName')))]"
    },
    "resources": [
        {
            "condition": "[and(equals(parameters('subnetOption'), 'existing'), not(equals(parameters('privateEndpointType'), 'none')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[concat('UpdateSubnetPolicy-', uniqueString(parameters('vnetName'), parameters('subnetName')))]",
            "resourceGroup": "[parameters('vnetResourceGroupName')]",
            "subscriptionId": "[parameters('privateEndpointSubscription')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "2019-09-01",
                            "name": "[concat(parameters('vnetName'), '/', parameters('subnetName'))]",
                            "properties": "[if(and(equals(parameters('subnetOption'), 'existing'), not(equals(parameters('privateEndpointType'), 'none'))), union(reference(variables('subnet'), '2019-09-01'), variables('subnetPolicyForPE')), json('null'))]"
                        }
                    ]
                }
            }
        },
        {
            "condition": "[and(variables('enablePE'), equals(parameters('storageAccountOption'), 'new'))]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2019-04-01",
            "name": "[parameters('storageAccountName')]",
            "location": "[parameters('storageAccountLocation')]",
            "sku": {
                "name": "[parameters('storageAccountType')]"
            },
            "kind": "StorageV2",
            "properties": {
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                },
                "supportsHttpsTrafficOnly": true,
                "networkAcls": "[if(equals(parameters('storageAccountBehindVNet'), 'true'), variables('networkRuleSetBehindVNet'), json('null'))]",
                "isHnsEnabled": "[parameters('storageAccountHnsEnabled')]"
            }
        },
        {
            "condition": "[and(variables('enablePE'), equals(parameters('keyVaultOption'), 'new'))]",
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[parameters('keyVaultName')]",
            "location": "[parameters('keyVaultLocation')]",
            "properties": {
                "tenantId": "[variables('tenantId')]",
                "sku": {
                    "name": "standard",
                    "family": "A"
                },
                "accessPolicies": [],
                "networkAcls": "[if(equals(parameters('keyVaultBehindVNet'), 'true'), variables('networkRuleSetBehindVNet'), json('null'))]"
            }
        },
        {
            "condition": "[and(variables('enablePE'), equals(parameters('containerRegistryOption'), 'new'))]",
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2019-05-01",
            "name": "[parameters('containerRegistryName')]",
            "location": "[parameters('containerRegistryLocation')]",
            "sku": {
                "name": "[parameters('containerRegistrySku')]"
            },
            "properties": {
                "adminUserEnabled": true,
                "networkRuleSet": "[if(equals(parameters('containerRegistryBehindVNet'), 'true'), variables('networkRuleSetBehindVNet'), json('null'))]"
            }
        },
        {
            "condition": "[and(variables('enablePE'), equals(parameters('applicationInsightsOption'), 'new'))]",
            "type": "Microsoft.Insights/components",
            "apiVersion": "2018-05-01-preview",
            "name": "[parameters('applicationInsightsName')]",
            "location": "[if(or(equals(parameters('applicationInsightsLocation'),'westcentralus'), equals(parameters('applicationInsightsLocation'),'eastus2euap'), equals(parameters('applicationInsightsLocation'),'centraluseuap'), equals(parameters('applicationInsightsLocation'),'westus3')),'southcentralus',parameters('applicationInsightsLocation'))]",
            "kind": "web",
            "properties": {
                "Application_Type": "web"
            }
        },
        {
            "condition": "[variables('enablePE')]",
            "type": "Microsoft.MachineLearningServices/workspaces",
            "apiVersion": "2020-06-01",
            "name": "[parameters('workspaceName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
            ],
            "identity": {
                "type": "[parameters('identityType')]",
                "userAssignedIdentities": "[if(equals(parameters('identityType'), 'userAssigned'), variables('userAssignedIdentities'), json('null'))]"
            },
            "sku": {
                "tier": "[parameters('sku')]",
                "name": "[parameters('sku')]"
            },
            "properties": {
                "friendlyName": "[parameters('workspaceName')]",
                "storageAccount": "[variables('storageAccount')]",
                "keyVault": "[variables('keyVault')]",
                "applicationInsights": "[variables('applicationInsights')]",
                "containerRegistry": "[if(not(equals(parameters('containerRegistryOption'), 'none')), variables('containerRegistry'), json('null'))]",
                "primaryUserAssignedIdentity": "[if(equals(parameters('identityType'), 'userAssigned'), variables('primaryUserAssignedIdentity'), json('null'))]",
                "systemDatastoresAuthMode": "[if(not(equals(parameters('systemDatastoresAuthMode'), 'accessKey')), parameters('systemDatastoresAuthMode'), json('null'))]"
            }
        },
        {
            "condition": "[and(variables('enablePE'), not(equals(parameters('privateEndpointType'), 'none')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateEndpointDeploymentName')]",
            "resourceGroup": "[parameters('privateEndpointResourceGroupName')]",
            "subscriptionId": "[parameters('privateEndpointSubscription')]",
            "dependsOn": [
                "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('workspaceName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "apiVersion": "2020-06-01",
                            "name": "[parameters('privateEndpointName')]",
                            "type": "Microsoft.Network/privateEndpoints",
                            "location": "[parameters('location')]",
                            "properties": {
                                "privateLinkServiceConnections": "[if(equals(parameters('privateEndpointType'), 'AutoApproval'), variables('defaultPEConnections'), json('null'))]",
                                "manualPrivateLinkServiceConnections": "[if(equals(parameters('privateEndpointType'), 'ManualApproval'), variables('defaultPEConnections'), json('null'))]",
                                "subnet": {
                                    "id": "[variables('subnet')]"
                                }
                            }
                        }
                    ]
                }
            }
        }
    ],
    "outputs": {
        "PrivateEndPointNotSupport": {
            "condition": "[and(not(variables('enablePE')), not(equals(parameters('privateEndpointType'), 'none')))]",
            "type": "string",
            "value": "Private endpoint is not supported in the specified location."
        }
    }
}