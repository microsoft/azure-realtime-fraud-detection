{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      
      "deploymentPrefixName": {
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the Azure Machine Learning service workspace."
        }
      },
      "workspaceName": {
        "type": "string",
        "metadata": {
          "description": "Specifies the name of the Azure Machine Learning service workspace."
        }
      },
        "storageAccountName": {
            "type": "String",
            "metadata": {
                "description": "The name of the primary ADLS Gen2 Storage Account. If not provided, the workspace name will be used."
            }
        },
        "sqlAdministratorLogin": {
            "type": "String",
            "metadata": {
                "description": "Provide the user name for SQL login."
            }
        },
        "sqlAdministratorPassword": {
            "type": "SecureString",
            "metadata": {
                "description": "The passwords must meet the following guidelines:<ul><li> The password does not contain the account name of the user.</li><li> The password is at least eight characters long.</li><li> The password contains characters from three of the following four categories:</li><ul><li>Latin uppercase letters (A through Z)</li><li>Latin lowercase letters (a through z)</li><li>Base 10 digits (0 through 9)</li><li>Non-alphanumeric characters such as: exclamation point (!), dollar sign ($), number sign (#), or percent (%).</li></ul></ul> Passwords can be up to 128 characters long. Use passwords that are as long and complex as possible. Visit <a href=https://aka.ms/azuresqlserverpasswordpolicy>aka.ms/azuresqlserverpasswordpolicy</a> for more details."
            }
        },
    "sku":{
        "type": "string",
        "defaultValue": "enterprise",
          "allowedValues": [
            "basic",
            "enterprise"
          ],
          "metadata": {
            "description": "Specifies the sku, also referred as 'edition' of the Azure Machine Learning workspace."
          }
      },
       "namespaces_ehtesserato_name": {
            "defaultValue": "ehtesserato",
            "type": "String"
        },
     "functionAppName": {
        "type": "string",
        "defaultValue": "[format('func-{0}', uniqueString(resourceGroup().id))]",
        "metadata": {
          "description": "The name of the Azure Function app."
        }
      },
      "storageAccountType": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS"
        ],
        "metadata": {
          "description": "Storage Account type"
        }
      },
      "allowAllConnections": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Choose whether you want to synchronise metadata."
      }
    },
       "appInsightsLocation": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for Application Insights"
        }
      },
      "functionWorkerRuntime": {
        "type": "string",
        "defaultValue": "node",
        "allowedValues": [
          "dotnet",
          "node",
          "python",
          "java"
        ],
        "metadata": {
          "description": "The language worker runtime to load in the function app."
        }
      },
      "location": {
        "type": "string",
        "metadata": {
          "description": "Required for Linux app to represent runtime stack in the format of 'runtime|runtimeVersion'. For example: 'python|3.9'"
        }
      }
    },

    //Variables

    "variables": {
      "defaultDataLakeStorageFilesystemName":"[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "defaultDataLakeStorageAccountUrl": "[concat('https://', parameters('storageAccountName'), '.dfs.core.windows.net')]",
      "storageAccountName": "[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "dlsName": "[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "storageAccountType": "Standard_LRS",
      "keyVaultName": "[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "eventHubName": "[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "tenantId": "[subscription().tenantId]",
      "applicationInsightsName": "[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "hostingPlanName":"[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "storageAccountid": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
      "cosmosName":"[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "cosmosGremlinName":"[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "SynapseWorkspaceName":"[concat('sy',uniqueString(resourceGroup().id))]",
      "SynapseManagedResourceGroupName":"[concat(parameters('deploymentPrefixName'),uniqueString(resourceGroup().id))]",
      "dataLakeStorageName": "[if(empty(parameters('storageAccountName')), replace(tolower(parameters('workspaceName')),'-',''), tolower(parameters('storageAccountName')))]",
      "sqlPoolName":"[concat('syPool',uniqueString(resourceGroup().id))]"
    },
    "resources": [
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-04-01",
        "name": "[concat('fraud',uniqueString(resourceGroup().id))]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[variables('storageAccountType')]"
        },
        "kind": "StorageV2",
        "properties": {
          "encryption": {
            "services": {
              "blob": {
                "enabled": true
              },
              "file": {
                "enabled": true
              }
            },
            "keySource": "Microsoft.Storage"
          },
          "supportsHttpsTrafficOnly": true
        }
      },
      {
        "type": "Microsoft.KeyVault/vaults",
        "apiVersion": "2018-02-14",
        "name": "[concat('fraudvault',uniqueString(resourceGroup().id))]",
        "location": "[parameters('location')]",
        "properties": {
          "tenantId": "[variables('tenantId')]",
          "sku": {
            "name": "standard",
            "family": "A"
          },
          "accessPolicies": [
          ]
        }
      },
      {
        "type": "Microsoft.Insights/components",
        "apiVersion": "2018-05-01-preview",
        "name": "[variables('applicationInsightsName')]",
        "location": "[parameters('location')]",
        "kind": "web",
        "properties": {
          "Application_Type": "web"
        }
      },
      {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2021-11-01",
            "name": "[variables('eventHubName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard",
                "tier": "Standard",
                "capacity": 1
            },
            "properties": {
                "disableLocalAuth": false,
                "zoneRedundant": false,
                "isAutoInflateEnabled": false,
                "maximumThroughputUnits": 0,
                "kafkaEnabled": true
            }
        },
        {

            "type": "Microsoft.EventHub/namespaces/eventhubs",
            "apiVersion": "2021-11-01",
            "name": "[concat(variables('eventHubName'), '/ehfraud')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces',  variables('eventHubName'))]"
            ],
            "properties": {
                "messageRetentionInDays": 1,
                "partitionCount": 1,
                "status": "Active"
            }
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "apiVersion": "2021-11-01",
            "name": "[concat(variables('eventHubName'), '/ehfraud/$Default')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubName'), 'ehfraud')]",
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubName'))]"
            ],
            "properties": {}
        },
        {
            "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
            "apiVersion": "2021-11-01",
            "name": "[concat(variables('eventHubName'), '/ehfraud/asa-consumer-group-fraud')]",
            "location": "[parameters('location')]",
            "dependsOn":[
                "[resourceId('Microsoft.EventHub/namespaces/eventhubs', variables('eventHubName'), 'ehfraud')]",
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubName'))]"
            ],
            "properties": {}
        },

        //function deployment

        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[concat('funcsite',uniqueString(resourceGroup().id))]",
            "kind": "functionapp,linux",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "name": "[concat('funcsite',uniqueString(resourceGroup().id))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~2"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2019-06-01').keys[0].value)]"
                        }
                    ]
                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "clientAffinityEnabled": false
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2019-08-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[parameters('location')]",
            "kind": "linux",
            "properties": {
                "reserved": true
            },
            "sku": {
                "Tier": "Standard",
                "Name": "S1"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2019-06-01",
            "location": "[parameters('location')]",
            "kind": "StorageV2",
            "sku": {
                "name": "Standard_LRS"
            }
        },

        // Stream Analytics Job
        {
          "type": "Microsoft.StreamAnalytics/StreamingJobs",
          "apiVersion": "2019-06-01",
          "name": "[concat('fraudAsa',uniqueString(resourceGroup().id))]",
          "location": "[parameters('location')]",
          "properties": {
            "sku": {
              "name": "standard"
            },
            "outputErrorPolicy": "stop",
            "eventsOutOfOrderPolicy": "adjust",
            "eventsOutOfOrderMaxDelayInSeconds": 0,
            "eventsLateArrivalMaxDelayInSeconds": 5,
            "dataLocale": "en-US",
            "transformation": {
              "name": "Transformation",
              "properties": {
                "streamingUnits": 3,
                "query": "SELECT\r\n    *\r\nINTO\r\n    [YourOutputAlias]\r\nFROM\r\n    [YourInputAlias]"
              }
            }
          }
        },

        //CosmosDB + Containers deployment

        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2021-10-15",
            "name": "[variables('cosmosName')]",
            "location": "[parameters('location')]",
            "tags": {
                "defaultExperience": "Core (SQL)",
                "hidden-cosmos-mmspecial": "",
                "CosmosAccountType": "Non-Production"
            },
            "kind": "GlobalDocumentDB",
            "identity": {
                "type": "None"
            },
            "properties": {
                "publicNetworkAccess": "Enabled",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "disableKeyBasedMetadataWriteAccess": false,
                "enableFreeTier": false,
                "enableAnalyticalStorage": true,
                "analyticalStorageConfiguration": {},
                "databaseAccountOfferType": "Standard",
                "defaultIdentity": "FirstPartyIdentity",
                "networkAclBypass": "None",
                "disableLocalAuth": false,
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session",
                    "maxIntervalInSeconds": 5,
                    "maxStalenessPrefix": 100
                },
                "locations": [
                    {
                        "locationName": "[parameters('location')]",
                        "provisioningState": "Succeeded",
                        "failoverPriority": 0,
                        "isZoneRedundant": false
                    }
                ],
                "cors": [],
                "capabilities": [],
                "ipRules": [],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 8,
                        "backupStorageRedundancy": "Local"
                    }
                },
                "networkAclBypassResourceIds": []
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "Fraud"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/00000000-0000-0000-0000-000000000001')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "roleName": "Cosmos DB Built-in Data Reader",
                "type": "BuiltInRole",
                "assignableScopes": [
                    "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
                ],
                "permissions": [
                    {
                        "dataActions": [
                            "Microsoft.DocumentDB/databaseAccounts/readMetadata",
                            "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/executeQuery",
                            "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/readChangeFeed",
                            "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read"
                        ],
                        "notDataActions": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud/Benford-First-Digit')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), 'Fraud')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "Benford-First-Digit",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud/Benford-Second-Digit')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), 'Fraud')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "Benford-Second-Digit",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud/Categories')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), 'Fraud')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "Categories",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/CategoryId"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud/Customers')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), 'Fraud')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "Customers",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/CustomerId"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
         {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud/leases')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), 'Fraud')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "leases",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud/Orders')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), 'Fraud')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "Orders",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/OrderId"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud/Transactions')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), 'Fraud')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "Transactions",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/id"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/throughputSettings",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosName'), '/Fraud/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', variables('cosmosName'), 'Fraud')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosName'))]"
            ],
            "properties": {
                "resource": {
                    "throughput": 400,
                    "autoscaleSettings": {
                        "maxThroughput": 4000
                    }
                }
            }
        },

        //CosmosDB Gremlin Deployment

        {
            "type": "Microsoft.DocumentDB/databaseAccounts",
            "apiVersion": "2021-10-15",
            "name": "[variables('cosmosGremlinName')]",
            "location": "[parameters('location')]",
            "tags": {
                "defaultExperience": "Gremlin (graph)",
                "hidden-cosmos-mmspecial": ""
            },
            "kind": "GlobalDocumentDB",
            "identity": {
                "type": "None"
            },
            "properties": {
                "publicNetworkAccess": "Enabled",
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "disableKeyBasedMetadataWriteAccess": false,
                "enableFreeTier": false,
                "enableAnalyticalStorage": false,
                "analyticalStorageConfiguration": {},
                "databaseAccountOfferType": "Standard",
                "defaultIdentity": "FirstPartyIdentity",
                "networkAclBypass": "None",
                "disableLocalAuth": false,
                "consistencyPolicy": {
                    "defaultConsistencyLevel": "Session",
                    "maxIntervalInSeconds": 5,
                    "maxStalenessPrefix": 100
                },
                "locations": [
                    {
                        "locationName": "[parameters('location')]",
                        "provisioningState": "Succeeded",
                        "failoverPriority": 0,
                        "isZoneRedundant": false
                    }
                ],
                "cors": [],
                "capabilities": [
                    {
                        "name": "EnableGremlin"
                    }
                ],
                "ipRules": [],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 8,
                        "backupStorageRedundancy": "Local"
                    }
                },
                "networkAclBypassResourceIds": []
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosGremlinName'), '/frauddetectiondb')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosGremlinName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "frauddetectiondb"
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosGremlinName'), '/00000000-0000-0000-0000-000000000001')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosGremlinName'))]"
            ],
            "properties": {
                "roleName": "Cosmos DB Built-in Data Reader",
                "type": "BuiltInRole",
                "assignableScopes": [
                    "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosGremlinName'))]"
                ],
                "permissions": [
                    {
                        "dataActions": [
                            "Microsoft.DocumentDB/databaseAccounts/readMetadata",
                            "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/executeQuery",
                            "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/readChangeFeed",
                            "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/read"
                        ],
                        "notDataActions": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosGremlinName'), '/00000000-0000-0000-0000-000000000002')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosGremlinName'))]"
            ],
            "properties": {
                "roleName": "Cosmos DB Built-in Data Contributor",
                "type": "BuiltInRole",
                "assignableScopes": [
                    "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosGremlinName'))]"
                ],
                "permissions": [
                    {
                        "dataActions": [
                            "Microsoft.DocumentDB/databaseAccounts/readMetadata",
                            "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/*",
                            "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/items/*"
                        ],
                        "notDataActions": []
                    }
                ]
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosGremlinName'), '/frauddetectiondb/fraudring')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases', variables('cosmosGremlinName'), 'frauddetectiondb')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosGremlinName'))]"
            ],
            "properties": {
                "resource": {
                    "id": "fraudring",
                    "indexingPolicy": {
                        "indexingMode": "consistent",
                        "automatic": true,
                        "includedPaths": [
                            {
                                "path": "/*"
                            }
                        ],
                        "excludedPaths": [
                            {
                                "path": "/\"_etag\"/?"
                            }
                        ]
                    },
                    "partitionKey": {
                        "paths": [
                            "/pk"
                        ],
                        "kind": "Hash"
                    },
                    "uniqueKeyPolicy": {
                        "uniqueKeys": []
                    },
                    "conflictResolutionPolicy": {
                        "mode": "LastWriterWins",
                        "conflictResolutionPath": "/_ts"
                    }
                }
            }
        },
        {
            "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/throughputSettings",
            "apiVersion": "2021-10-15",
            "name": "[concat(variables('cosmosGremlinName'), '/frauddetectiondb/default')]",
            "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases', variables('cosmosGremlinName'), 'frauddetectiondb')]",
                "[resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosGremlinName'))]"
            ],
            "properties": {
                "resource": {
                    "throughput": 400
                }
            }
        }

        
    //Synapse TEST Deployment

    ,{
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-04-01",
        "name": "[variables('dlsName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "[variables('storageAccountType')]"
        },
        "kind": "StorageV2",
        "properties": {
          "encryption": {
            "services": {
              "blob": {
                "enabled": true
              },
              "file": {
                "enabled": true
              }
            },
            "keySource": "Microsoft.Storage"
          },
          "supportsHttpsTrafficOnly": true
        },
        "resources": [
            {
                "name": "[concat('default/', variables('defaultDataLakeStorageFilesystemName'))]",
                "type": "blobServices/containers",
                "apiVersion": "2019-06-01",
                "dependsOn": [
                    "[variables('dlsName')]"
                ],
                "properties": {
                    "publicAccess": "None"
                }

            }
        ]
      },
    {
      "type": "Microsoft.Synapse/workspaces",
      "apiVersion": "2019-06-01-preview",
      "name": "[variables('SynapseWorkspaceName')]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "dependsOn": [
        "[variables('dlsName')]",
        "[variables('defaultDataLakeStorageFilesystemName')]"
      ],
      "properties": {
        "defaultDataLakeStorage": {
          "accountUrl": "[reference(variables('dlsName')).primaryEndpoints.dfs]",
          "filesystem": "[variables('defaultDataLakeStorageFilesystemName')]"
        },
        "sqlAdministratorLogin": "[parameters('sqlAdministratorLogin')]",
        "sqlAdministratorLoginPassword": "[parameters('sqlAdministratorPassword')]",
        "managedVirtualNetwork": "default"
      },
      "resources": [
        {
          "condition": "[parameters('allowAllConnections')]",
          "type": "firewallrules",
          "apiVersion": "2019-06-01-preview",
          "name": "allowAll",
          "location": "[parameters('location')]",
          "dependsOn": [ "[variables('SynapseWorkspaceName')]" ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "255.255.255.255"
          }
        },
        {
          "type": "firewallrules",
          "apiVersion": "2019-06-01-preview",
          "name": "AllowAllWindowsAzureIps",
          "location": "[parameters('location')]",
          "dependsOn": [ "[variables('SynapseWorkspaceName')]" ],
          "properties": {
            "startIpAddress": "0.0.0.0",
            "endIpAddress": "0.0.0.0"
          }
        },
        {
          "type": "managedIdentitySqlControlSettings",
          "apiVersion": "2019-06-01-preview",
          "name": "default",
          "location": "[parameters('location')]",
          "dependsOn": [ "[variables('SynapseWorkspaceName')]" ],
          "properties": {
            "grantSqlControlToManagedIdentity": {
              "desiredState": "Enabled"
            }
          }
        }
      ]
    },
     {
      "type": "Microsoft.Synapse/workspaces/sqlPools",
      "apiVersion": "2019-06-01-preview",
      "name": "[concat(variables('SynapseWorkspaceName'), '/', variables('sqlPoolName'))]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "DW100c"
      },
      "dependsOn": [
        "[variables('SynapseWorkspaceName')]"
      ],
      "properties": {
        "createMode": "Default",
        "collation": "SQL_Latin1_General_CP1_CI_AS"
      },
      "resources": [
        {
          "condition": "[parameters('allowAllConnections')]",
          "type": "metadataSync",
          "apiVersion": "2019-06-01-preview",
          "name": "config",
          "location": "[parameters('location')]",
          "dependsOn": [
            "[variables('sqlPoolName')]"
          ],
          "properties": {
            "Enabled": "[parameters('allowAllConnections')]"
          }
        }
      ]
    }

        
        
      ]

}